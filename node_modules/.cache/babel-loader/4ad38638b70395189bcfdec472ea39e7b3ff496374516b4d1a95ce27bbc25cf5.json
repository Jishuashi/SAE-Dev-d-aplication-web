{"ast":null,"code":"(function () {\n  var base64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    crypt = {\n      // Bit-wise rotation left\n      rotl: function rotl(n, b) {\n        return n << b | n >>> 32 - b;\n      },\n      // Bit-wise rotation right\n      rotr: function rotr(n, b) {\n        return n << 32 - b | n >>> b;\n      },\n      // Swap big-endian to little-endian and vice versa\n      endian: function endian(n) {\n        // If number given, swap endian\n        if (n.constructor == Number) {\n          return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n        }\n\n        // Else, assume array and swap all items\n        for (var i = 0; i < n.length; i++) n[i] = crypt.endian(n[i]);\n        return n;\n      },\n      // Generate an array of any length of random bytes\n      randomBytes: function randomBytes(n) {\n        for (var bytes = []; n > 0; n--) bytes.push(Math.floor(Math.random() * 256));\n        return bytes;\n      },\n      // Convert a byte array to big-endian 32-bit words\n      bytesToWords: function bytesToWords(bytes) {\n        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8) words[b >>> 5] |= bytes[i] << 24 - b % 32;\n        return words;\n      },\n      // Convert big-endian 32-bit words to a byte array\n      wordsToBytes: function wordsToBytes(words) {\n        for (var bytes = [], b = 0; b < words.length * 32; b += 8) bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);\n        return bytes;\n      },\n      // Convert a byte array to a hex string\n      bytesToHex: function bytesToHex(bytes) {\n        for (var hex = [], i = 0; i < bytes.length; i++) {\n          hex.push((bytes[i] >>> 4).toString(16));\n          hex.push((bytes[i] & 0xF).toString(16));\n        }\n        return hex.join('');\n      },\n      // Convert a hex string to a byte array\n      hexToBytes: function hexToBytes(hex) {\n        for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.substr(c, 2), 16));\n        return bytes;\n      },\n      // Convert a byte array to a base-64 string\n      bytesToBase64: function bytesToBase64(bytes) {\n        for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n          var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];\n          for (var j = 0; j < 4; j++) if (i * 8 + j * 6 <= bytes.length * 8) base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 0x3F));else base64.push('=');\n        }\n        return base64.join('');\n      },\n      // Convert a base-64 string to a byte array\n      base64ToBytes: function base64ToBytes(base64) {\n        // Remove non-base-64 characters\n        base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n        for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {\n          if (imod4 == 0) continue;\n          bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);\n        }\n        return bytes;\n      }\n    };\n  module.exports = crypt;\n})();","map":{"version":3,"names":["base64map","crypt","rotl","n","b","rotr","endian","constructor","Number","i","length","randomBytes","bytes","push","Math","floor","random","bytesToWords","words","wordsToBytes","bytesToHex","hex","toString","join","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","replace","imod4","indexOf","pow","module","exports"],"sources":["/root/sae3-01-dev-d-apli/node_modules/crypt/crypt.js"],"sourcesContent":["(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n"],"mappings":"AAAA,CAAC,YAAW;EACV,IAAIA,SAAS,GACP,kEAAkE;IAExEC,KAAK,GAAG;MACN;MACAC,IAAI,EAAE,cAASC,CAAC,EAAEC,CAAC,EAAE;QACnB,OAAQD,CAAC,IAAIC,CAAC,GAAKD,CAAC,KAAM,EAAE,GAAGC,CAAG;MACpC,CAAC;MAED;MACAC,IAAI,EAAE,cAASF,CAAC,EAAEC,CAAC,EAAE;QACnB,OAAQD,CAAC,IAAK,EAAE,GAAGC,CAAE,GAAKD,CAAC,KAAKC,CAAE;MACpC,CAAC;MAED;MACAE,MAAM,EAAE,gBAASH,CAAC,EAAE;QAClB;QACA,IAAIA,CAAC,CAACI,WAAW,IAAIC,MAAM,EAAE;UAC3B,OAAOP,KAAK,CAACC,IAAI,CAACC,CAAC,EAAE,CAAC,CAAC,GAAG,UAAU,GAAGF,KAAK,CAACC,IAAI,CAACC,CAAC,EAAE,EAAE,CAAC,GAAG,UAAU;QACvE;;QAEA;QACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,CAAC,CAACO,MAAM,EAAED,CAAC,EAAE,EAC/BN,CAAC,CAACM,CAAC,CAAC,GAAGR,KAAK,CAACK,MAAM,CAACH,CAAC,CAACM,CAAC,CAAC,CAAC;QAC3B,OAAON,CAAC;MACV,CAAC;MAED;MACAQ,WAAW,EAAE,qBAASR,CAAC,EAAE;QACvB,KAAK,IAAIS,KAAK,GAAG,EAAE,EAAET,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAC7BS,KAAK,CAACC,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;QAC7C,OAAOJ,KAAK;MACd,CAAC;MAED;MACAK,YAAY,EAAE,sBAASL,KAAK,EAAE;QAC5B,KAAK,IAAIM,KAAK,GAAG,EAAE,EAAET,CAAC,GAAG,CAAC,EAAEL,CAAC,GAAG,CAAC,EAAEK,CAAC,GAAGG,KAAK,CAACF,MAAM,EAAED,CAAC,EAAE,EAAEL,CAAC,IAAI,CAAC,EAC9Dc,KAAK,CAACd,CAAC,KAAK,CAAC,CAAC,IAAIQ,KAAK,CAACH,CAAC,CAAC,IAAK,EAAE,GAAGL,CAAC,GAAG,EAAG;QAC7C,OAAOc,KAAK;MACd,CAAC;MAED;MACAC,YAAY,EAAE,sBAASD,KAAK,EAAE;QAC5B,KAAK,IAAIN,KAAK,GAAG,EAAE,EAAER,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,KAAK,CAACR,MAAM,GAAG,EAAE,EAAEN,CAAC,IAAI,CAAC,EACvDQ,KAAK,CAACC,IAAI,CAAEK,KAAK,CAACd,CAAC,KAAK,CAAC,CAAC,KAAM,EAAE,GAAGA,CAAC,GAAG,EAAG,GAAI,IAAI,CAAC;QACvD,OAAOQ,KAAK;MACd,CAAC;MAED;MACAQ,UAAU,EAAE,oBAASR,KAAK,EAAE;QAC1B,KAAK,IAAIS,GAAG,GAAG,EAAE,EAAEZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACF,MAAM,EAAED,CAAC,EAAE,EAAE;UAC/CY,GAAG,CAACR,IAAI,CAAC,CAACD,KAAK,CAACH,CAAC,CAAC,KAAK,CAAC,EAAEa,QAAQ,CAAC,EAAE,CAAC,CAAC;UACvCD,GAAG,CAACR,IAAI,CAAC,CAACD,KAAK,CAACH,CAAC,CAAC,GAAG,GAAG,EAAEa,QAAQ,CAAC,EAAE,CAAC,CAAC;QACzC;QACA,OAAOD,GAAG,CAACE,IAAI,CAAC,EAAE,CAAC;MACrB,CAAC;MAED;MACAC,UAAU,EAAE,oBAASH,GAAG,EAAE;QACxB,KAAK,IAAIT,KAAK,GAAG,EAAE,EAAEa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACX,MAAM,EAAEe,CAAC,IAAI,CAAC,EAChDb,KAAK,CAACC,IAAI,CAACa,QAAQ,CAACL,GAAG,CAACM,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5C,OAAOb,KAAK;MACd,CAAC;MAED;MACAgB,aAAa,EAAE,uBAAShB,KAAK,EAAE;QAC7B,KAAK,IAAIiB,MAAM,GAAG,EAAE,EAAEpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACF,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;UACrD,IAAIqB,OAAO,GAAIlB,KAAK,CAACH,CAAC,CAAC,IAAI,EAAE,GAAKG,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GAAGG,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC;UACnE,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EACxB,IAAItB,CAAC,GAAG,CAAC,GAAGsB,CAAC,GAAG,CAAC,IAAInB,KAAK,CAACF,MAAM,GAAG,CAAC,EACnCmB,MAAM,CAAChB,IAAI,CAACb,SAAS,CAACgC,MAAM,CAAEF,OAAO,KAAK,CAAC,IAAI,CAAC,GAAGC,CAAC,CAAC,GAAI,IAAI,CAAC,CAAC,CAAC,KAEhEF,MAAM,CAAChB,IAAI,CAAC,GAAG,CAAC;QACtB;QACA,OAAOgB,MAAM,CAACN,IAAI,CAAC,EAAE,CAAC;MACxB,CAAC;MAED;MACAU,aAAa,EAAE,uBAASJ,MAAM,EAAE;QAC9B;QACAA,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;QAE7C,KAAK,IAAItB,KAAK,GAAG,EAAE,EAAEH,CAAC,GAAG,CAAC,EAAE0B,KAAK,GAAG,CAAC,EAAE1B,CAAC,GAAGoB,MAAM,CAACnB,MAAM,EACpDyB,KAAK,GAAG,EAAE1B,CAAC,GAAG,CAAC,EAAE;UACnB,IAAI0B,KAAK,IAAI,CAAC,EAAE;UAChBvB,KAAK,CAACC,IAAI,CAAE,CAACb,SAAS,CAACoC,OAAO,CAACP,MAAM,CAACG,MAAM,CAACvB,CAAC,GAAG,CAAC,CAAC,CAAC,GAC7CK,IAAI,CAACuB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGF,KAAK,GAAG,CAAC,CAAC,GAAG,CAAE,KAAMA,KAAK,GAAG,CAAE,GAChDnC,SAAS,CAACoC,OAAO,CAACP,MAAM,CAACG,MAAM,CAACvB,CAAC,CAAC,CAAC,KAAM,CAAC,GAAG0B,KAAK,GAAG,CAAG,CAAC;QAClE;QACA,OAAOvB,KAAK;MACd;IACF,CAAC;EAED0B,MAAM,CAACC,OAAO,GAAGtC,KAAK;AACxB,CAAC,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}