{"ast":null,"code":"import _defineProperty from\"/root/sae3-01-dev-d-apli/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/root/sae3-01-dev-d-apli/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/root/sae3-01-dev-d-apli/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import'../../../../styles/moduleCrypto.css';import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ModuleCrypto(_ref){var logged=_ref.logged;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),result=_useState2[0],setResult=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState({key:'',textCrypto:'',t:'',method:'encrypt'}),_useState6=_slicedToArray(_useState5,2),formData=_useState6[0],setFormData=_useState6[1];function checkHexa(key,str){var regex=/[0-9A-Fa-f]{6}/g;if(str.match(regex)){return dechiffrementRC4(key,str);}else{return rc4(key,str);}}function rc4(key,str){/**\n         * @returns texte chiffré en hexadécimal\n         * @param key : String\n         * @param str : String\n         * @type {RegExp}\n         */var ciphertext=new Uint8Array(str.length);// Algorithme PRGA générant la suite chiffrante de RC4\nvar S=new Uint8Array(256);for(var _i=0;_i<256;_i++){S[_i]=_i;}var j=0;for(var _i2=0;_i2<256;_i2++){j=(j+S[_i2]+key.charCodeAt(_i2%key.length))%256;// Tableau construit à partir de la clé\nvar _ref2=[S[j],S[_i2]];S[_i2]=_ref2[0];S[j]=_ref2[1];}// Algorithme KSA pour la génération de la permutation\nvar i=0;j=0;for(var n=0;n<str.length;n++){i=(i+1)%256;j=(j+S[i])%256;var _ref3=[S[j],S[i]];S[i]=_ref3[0];S[j]=_ref3[1];var z=S[(S[i]+S[j])%256];// XOR entre la clé et le texte pour produire le chiffrement\nciphertext[n]=str.charCodeAt(n)^z;}str=\"\";for(var _i3=0;_i3<ciphertext.length;_i3++){if(ciphertext[_i3]<=16){str+=\"0\";// la conversion en hexadécimal ne renvoie pas un 0, nécessaire au bon chiffrement\n}str+=ciphertext[_i3].toString(16);// conversion décimal/hexadécimal\n}return str;}function dechiffrementRC4(key,ciphertext){// Convertit l'hexadécimal en bytes pour le déchiffrement\nvar bytes=[];for(var i=0;i<ciphertext.length;i+=2){bytes.push(parseInt(ciphertext.substr(i,2),16));}var ciphertext=String.fromCharCode.apply(null,bytes);// Algorithme PRGA générant la suite déchiffrante de RC4\nvar S=new Array(256);for(var _i4=0;_i4<256;_i4++){S[_i4]=_i4;}var j=0;for(var _i5=0;_i5<256;_i5++){j=(j+S[_i5]+key.charCodeAt(_i5%key.length))%256;var _ref4=[S[j],S[_i5]];S[_i5]=_ref4[0];S[j]=_ref4[1];}// Algorithme KSA pour la génération de la permutation\nvar i=0;j=0;var plaintext=\"\";for(var n=0;n<ciphertext.length;n++){i=(i+1)%256;j=(j+S[i])%256;var _ref5=[S[j],S[i]];S[i]=_ref5[0];S[j]=_ref5[1];var z=S[(S[i]+S[j])%256];plaintext+=String.fromCharCode(ciphertext.charCodeAt(n)^z);}return plaintext;}var handleChange=function handleChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormData(_objectSpread(_objectSpread({},formData),{},_defineProperty({},name,value)));};var handleSubmit=function handleSubmit(event){event.preventDefault();setResult(\"\");setError(\"\");if(formData.key!==\"\"){if(formData.textCrypto!==\"\"){if(formData.method==\"encrypt\"){setResult(rc4(formData.key,formData.textCrypto));}else{setResult(dechiffrementRC4(formData.key,formData.textCrypto));}}else{setError(\"Erreur le champ Texte n'a pas de valeur\");}}else{setError(\"Erreur le champ Clé n'a pas de valeur\");}};var navigate=useNavigate();if(logged){return/*#__PURE__*/_jsxs(\"div\",{className:\"ModuleCrypto\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"titleCrypto\",children:\"Module de cryptographie\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"inputsCrypto\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"inputTextCrypto\",children:\"Entrez les valeurs requise pour chiffrer le texte en hexad\\xE9cimal: \"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"key\",children:\"Cl\\xE9: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"key\",name:\"key\",onChange:handleChange}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"textCrypto\",children:\"Texte: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"textCrypto\",name:\"textCrypto\",onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"radioInputsCrypto\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"EncryptOrDecrypt\",children:\"Chiffrage/d\\xE9chiffrage :\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"encrypt\",children:\"Chiffrage\"}),/*#__PURE__*/_jsx(\"input\",{type:\"radio\",className:\"encrypt\",name:\"method\",value:\"encrypt\",defaultChecked:true,onChange:handleChange}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"decrypt\",children:\"D\\xE9chiffrage\"}),/*#__PURE__*/_jsx(\"input\",{type:\"radio\",className:\"decrypt\",name:\"method\",value:\"decrypt\",onChange:handleChange})]}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",className:\"lunchButtonCrypto\",value:\"Lancer le chiffrement\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dialogBoxCrypto\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"errorCrypto\",children:error}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"result\",children:\"R\\xE9sultat: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"result\",onInput:false,className:\"calcResultCrypto\",value:result})]})]});}else{return navigate(\"/notAllowed\");}}export default ModuleCrypto;","map":{"version":3,"names":["React","useState","useNavigate","ModuleCrypto","logged","result","setResult","error","setError","key","textCrypto","t","method","formData","setFormData","checkHexa","str","regex","match","dechiffrementRC4","rc4","ciphertext","Uint8Array","length","S","i","j","charCodeAt","n","z","toString","bytes","push","parseInt","substr","String","fromCharCode","apply","Array","plaintext","handleChange","event","target","name","value","handleSubmit","preventDefault","navigate"],"sources":["/root/sae3-01-dev-d-apli/src/pages/domains/modules/Securite/module_crypto.js"],"sourcesContent":["import React, {useState} from 'react';\nimport '../../../../styles/moduleCrypto.css';\nimport {useNavigate} from \"react-router-dom\";\n\nfunction ModuleCrypto({logged}) {\n    let [result, setResult] = useState(``);\n    let [error, setError] = useState(\"\");\n\n    const [formData, setFormData] = useState({\n        key: '',\n        textCrypto: '',\n        t: '',\n\tmethod: 'encrypt'\n    });\n\n    function checkHexa(key,str){\n        var regex = /[0-9A-Fa-f]{6}/g;\n        if (str.match(regex)){\n            return dechiffrementRC4(key,str)\n        }\n        else {\n            return rc4(key,str)\n        }\n    }\n\n    function rc4(key, str) {\n        /**\n         * @returns texte chiffré en hexadécimal\n         * @param key : String\n         * @param str : String\n         * @type {RegExp}\n         */\n\n\n        let ciphertext = new Uint8Array(str.length);\n\n        // Algorithme PRGA générant la suite chiffrante de RC4\n        let S = new Uint8Array(256);\n        for (let i = 0; i < 256; i++) {\n            S[i] = i;\n        }\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + S[i] + key.charCodeAt(i % key.length)) % 256; // Tableau construit à partir de la clé\n            [S[i], S[j]] = [S[j], S[i]];\n        }\n\n        // Algorithme KSA pour la génération de la permutation\n        let i = 0;\n        j = 0;\n        for (let n = 0; n < str.length; n++) {\n            i = (i + 1) % 256;\n            j = (j + S[i]) % 256;\n            [S[i], S[j]] = [S[j], S[i]];\n            let z = S[(S[i] + S[j]) % 256];\n\n            // XOR entre la clé et le texte pour produire le chiffrement\n            ciphertext[n] = str.charCodeAt(n) ^ z;\n        }\n\n        str = \"\"\n        for (let i = 0 ; i < ciphertext.length ; i++){\n            if (ciphertext[i] <= 16){\n                str += \"0\" // la conversion en hexadécimal ne renvoie pas un 0, nécessaire au bon chiffrement\n            }\n            str += ciphertext[i].toString(16) // conversion décimal/hexadécimal\n        }\n\n        return str\n\n\n    }\n\n    function dechiffrementRC4(key, ciphertext) {\n        // Convertit l'hexadécimal en bytes pour le déchiffrement\n        let bytes = [];\n        for (var i = 0; i < ciphertext.length; i += 2) {\n            bytes.push(parseInt(ciphertext.substr(i, 2), 16));\n        }\n        var ciphertext = String.fromCharCode.apply(null, bytes);\n\n        // Algorithme PRGA générant la suite déchiffrante de RC4\n        let S = new Array(256);\n        for (let i = 0; i < 256; i++) {\n            S[i] = i;\n        }\n\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + S[i] + key.charCodeAt(i % key.length)) % 256;\n            [S[i], S[j]] = [S[j], S[i]];\n        }\n\n        // Algorithme KSA pour la génération de la permutation\n        var i = 0;\n        j = 0;\n        let plaintext = \"\";\n        for (let n = 0; n < ciphertext.length; n++) {\n            i = (i + 1) % 256;\n            j = (j + S[i]) % 256;\n            [S[i], S[j]] = [S[j], S[i]];\n            let z = S[(S[i] + S[j]) % 256];\n            plaintext += String.fromCharCode(ciphertext.charCodeAt(n) ^ z);\n        }\n        return plaintext;\n    }\n\n    const handleChange = (event) => {\n        const {name, value} = event.target;\n        setFormData({...formData, [name]: value});\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setResult(``)\n        setError(\"\")\n        if (formData.key !== \"\") {\n            if (formData.textCrypto !== \"\") {\n\t\t    if (formData.method == \"encrypt\"){\n\t\t    \tsetResult(rc4(formData.key, formData.textCrypto))\n\t\t    }\n\t\t    else {\n\t\t\tsetResult(dechiffrementRC4(formData.key, formData.textCrypto))\n\t\t    }\n            } else {\n                setError(\"Erreur le champ Texte n'a pas de valeur\")\n            }\n        } else {\n            setError(\"Erreur le champ Clé n'a pas de valeur\")\n        }\n    }\n\n    const navigate = useNavigate();\n\n\n    if (logged) {\n        return (\n            <div className=\"ModuleCrypto\">\n                <h1 className={\"titleCrypto\"}>Module de cryptographie</h1>\n                <form onSubmit={handleSubmit}>\n                    <div className={\"inputsCrypto\"}>\n                        <p className={\"inputTextCrypto\"}>Entrez les valeurs requise pour chiffrer le texte en\n                            hexadécimal: </p>\n                        <label htmlFor={\"key\"}>Clé: </label>\n                        <input type={\"text\"} className={\"key\"} name={\"key\"} onChange={handleChange}/>\n                        <label htmlFor={\"textCrypto\"}>Texte: </label>\n                        <input type={\"text\"} className={\"textCrypto\"} name={\"textCrypto\"} onChange={handleChange}/>\n                    </div>\n\t\t    <div className={\"radioInputsCrypto\"}>\n                        <p className={\"EncryptOrDecrypt\"}>Chiffrage/déchiffrage :</p>\n                        <label htmlFor=\"encrypt\">Chiffrage</label>\n                        <input type={\"radio\"} className={\"encrypt\"} name={\"method\"} value=\"encrypt\" defaultChecked\n                               onChange={handleChange}/>\n                        <label htmlFor=\"decrypt\">Déchiffrage</label>\n                        <input type={\"radio\"} className={\"decrypt\"} name={\"method\"} value=\"decrypt\"\n                               onChange={handleChange}/>\n                    </div>\n                    <input type=\"submit\" className={\"lunchButtonCrypto\"} value=\"Lancer le chiffrement\"/>\n                </form>\n\n                <div className={\"dialogBoxCrypto\"}>\n                    <p className={\"errorCrypto\"}>{error}</p>\n                    <label htmlFor={\"result\"}>Résultat: </label>\n                    <input type={\"text\"} name={\"result\"} onInput={false} className={\"calcResultCrypto\"}\n                           value={result}></input>\n                </div>\n\n            </div>);\n    } else {\n        return navigate(\"/notAllowed\");\n    }\n}\n\nexport default ModuleCrypto;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}